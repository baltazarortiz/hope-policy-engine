#!/usr/bin/python3

import sys
import os
import tempfile
#import argparse
import subprocess
import TaggingUtils
import RWXTagger
import OpCodeTagger

from elftools.elf.elffile import ELFFile

script_path = os.path.dirname(os.path.realpath(__file__))
tools_dir = script_path + '/../build/'
md_range = tools_dir + 'md_range'
md_code = tools_dir + 'md_code'
md_asm_ann = tools_dir + 'md_asm_ann'
md_entity = tools_dir + 'md_entity'

#parser = argparse.ArgumentParser()
#args = parser.parse_args()

def usage():
     print("usage: gen_tag_info policy_dir taginfo_file_name elf_file_name")

if len(sys.argv) < 4:
     usage()
     sys.exit(1)

policy_dir = sys.argv[1]
taginfo_file_name = sys.argv[2]
elf_file_name = sys.argv[3]
asm_file_name = elf_file_name + ".text"
annotated_asm_file_name = elf_file_name + ".text.tagged"
extra_entities_files = sys.argv[4:]

try:
     if os.path.isfile(taginfo_file_name):
         os.remove(taginfo_file_name)
except OSError as err:
     print('could not remove ' + taginfo_file_name)
     sys.exit(-1)

with open(elf_file_name, 'rb') as f:
     ef = ELFFile(f)

     range_file = TaggingUtils.RangeFile()

     # write any ranges for the RWX policy
     RWXTagger.generate_rwx_ranges(ef, range_file)

     # done with all ranges for the range file - finish and apply those tags
     range_file.finish();
     #range_file.print()
     presult = subprocess.run([md_range, policy_dir, range_file.name(), taginfo_file_name])
     if presult.returncode != 0:
          sys.exit(presult.returncode)

     range_file.done()

     # Apply opcode tags
     OpCodeTagger.tag_op_codes(policy_dir, md_code, ef, taginfo_file_name)

     # Apply entities
     presult = subprocess.run([md_entity, policy_dir, elf_file_name, taginfo_file_name] +
                              extra_entities_files)
     if presult.returncode != 0:
          sys.exit(presult.returncode)

     # generate the asm file
     with open(asm_file_name, "w") as asm_file:
          presult = subprocess.run(["riscv32-unknown-elf-objdump", "-dS", elf_file_name],
                                   stdout=asm_file)
          if presult.returncode != 0:
               sys.exit(presult.returncode)

     # annotate the asm file
     presult = subprocess.run([md_asm_ann, policy_dir, taginfo_file_name, asm_file_name])
     if presult.returncode != 0:
          sys.exit(presult.returncode)
