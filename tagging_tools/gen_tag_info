#!/usr/bin/env python3

import os
import tempfile
import sys
import subprocess

from elftools.elf.elffile import ELFFile
from elftools.elf.constants import SH_FLAGS

script_path = os.path.dirname(os.path.realpath(__file__))
md_range = script_path + '/../build/md_range'
md_code = script_path + '/../build/md_code'

class RangeFile:
     def __init__(self):
          self.file = tempfile.NamedTemporaryFile(mode='a', delete = False, prefix='ranges_');
     def write_range(self, start, end, tag):
          self.file.write('0x%x 0x%x %s\n' % (start, end, tag))
     def finish(self):
          self.file.close();
     def name(self):
          if self.file is None:
               raise Exception('file does not exist')
          return self.file.name
     def done(self):
          if self.file is not None:
               try:
                    os.remove(self.file.name)
                    self.file = None
               except:
                    pass
     def print(self):
          print(self.file.name)
          with open(self.file.name, 'r') as f:
               for l in f.readlines():
                    print(l)
     def __del__(self):
          self.done()

RWX_X = 'Require.Tools.Elf.Section.SHF_EXECINSTR'
RWX_R = 'Require.Tools.Elf.Section.SHF_ALLOC'
RWX_W = 'Require.Tools.Elf.Section.SHF_WRITE'

def generate_rwx_ranges(ef, range_file):
     for s in ef.iter_sections():
          flags = s['sh_flags']
          start = s['sh_addr']
          end = start + s['sh_size']
          if flags & SH_FLAGS.SHF_EXECINSTR:
               range_file.write_range(start, end, RWX_X)
               range_file.write_range(start, end, RWX_R)
               print('X {0}: 0x{1:X}'.format(s.name, start))
          elif flags & SH_FLAGS.SHF_WRITE:
               range_file.write_range(start, end, RWX_W)
               print('W {0}: 0x{1:X}'.format(s.name, start))
          elif flags & SH_FLAGS.SHF_ALLOC:
               range_file.write_range(start, end, RWX_R)
               print('R {0}: 0x{1:X}'.format(s.name, start))

policy_dir = sys.argv[1]
#base_address_string = sys.argv[2]
taginfo_file_name = sys.argv[2]
elf_file_name = sys.argv[3]

try:
     os.remove(taginfo_file_name)
except OSError as err:
     print('could not remove ' + taginfo_file_name)

with open(elf_file_name, 'rb') as f:
     ef = ELFFile(f)

     range_file = RangeFile()

     # write any ranges for the RWX policy
     generate_rwx_ranges(ef, range_file)

     range_file.finish();
     #range_file.print()
     #     proc = subprocess.Popen([md_range, policy_dir, base_address_string, range_file.name(), taginfo_file_name])
     proc = subprocess.Popen([md_range, policy_dir, range_file.name(), taginfo_file_name])
     proc.wait()
     range_file.done()

     # tag the code for group tags
     for s in ef.iter_sections():
          if s['sh_flags'] & SH_FLAGS.SHF_EXECINSTR:
               section_addr_string = '0x{:08x}'.format(s['sh_addr'])
               proc = subprocess.Popen([md_code,
                                        policy_dir,
                                        #base_address_string,
                                        section_addr_string,
                                        taginfo_file_name],
                                       stdin=subprocess.PIPE,
               )
               proc.communicate(s.data())
               proc.wait()
